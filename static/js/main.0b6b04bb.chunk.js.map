{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setInputText","setStatus","inputText","todos","setTodos","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","floor","random","name","Todo","todotext","todo","map","item","filter","el","TodoList","staus","complete","Header","user","App","useState","status","filteredTodos","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","localData","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b6b04bb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = ({ setInputText ,setStatus ,inputText, todos , setTodos }) => {\n    \n    // since we dont submit the form we update the value if the input with the next fumction\n    const inputTextHandler = (e) => {\n        setInputText(e.target.value);  \n    }\n     // when plus button will be pressed \n    const submitTodoHandler = (e) => {\n        e.preventDefault(); // preventing our form from submiting\n        if(inputText !==\"\"){\n            setTodos([\n                ...todos,{text: inputText ,  // set whatever text was in the input form when button was clicked\n                    completed:false ,  // by default new todos are not completed\n                    id:Math.floor(Math.random()*1000) // its not the best solution \n                }]);\n            }\n            // after submition we empty the imput\n        setInputText('');\n\n    }\n    // the chosen status from the select dropdown\n    const statusHandler = (e) => {\n        setStatus(e.target.value);\n    }\n    return(\n        <form>\n            <div>\n                <input value ={inputText} onChange={inputTextHandler}  type=\"text\" className=\"todo-input\" />\n                <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n                    <i className=\"fas fa-plus-square\"></i>\n                </button>\n            </div>\n            <div className=\"select\">\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n                <option value=\"all\">All</option>\n                <option value=\"completed\">Completed</option>\n                <option value=\"uncompleted\">Uncompleted</option>\n                </select>\n            </div>\n    </form>\n    )\n}\n\nexport default Form;","import React from \"react\";\n\n\nconst Todo = ({todotext , todos ,todo ,  setTodos}) =>{\n    // delete the todo that the delete button it was clicked\n    const deleteHandler = () =>{\n        setTodos(todos.filter(el => el.id !== todo.id ))\n    }\n    // toggle the completed field \n    const completeHandler = ()=>{\n        setTodos(todos.map(item => {\n            if(item.id === todo.id ){\n                return {\n                    ...item,completed:!item.completed\n                }\n            }\n            return item;\n        }))\n    }\n    return(\n        <div className=\"todo\">\n            <li className={`todo-item ${todo.completed?\"completed\":\"\"}`}>{todotext}</li>\n            <button onClick={completeHandler} className = \"complete-btn\">\n                <i className=\"fas fa-check\"></i>\n                </button>\n            <button onClick={deleteHandler} className=\"trash-btn\">\n                <i className=\"fas fa-trash\"></i>\n            </button>\n        </div>\n    );\n}\n\nexport default Todo;","import React from \"react\";\nimport Todo from \"./Todo\";\n\nconst TodoList = ({todos, staus , setTodos}) => {\n    return(\n        <div className=\"todo-container\">\n            <ul className=\"todo-list\">\n                {todos.map(todo =>(\n                    <Todo todos={todos}\n                    todo={todo}\n                     setTodos={setTodos}  key={todo.id} todotext={todo.text} complete={todo.complete}/>\n                ))}\n            </ul>\n      </div> \n    )\n}\n\nexport  default TodoList;","import React from \"react\";\n\nconst Header = ( {user} ) => {\n    return(\n        <div>\n            <header>\n                <h1>{user} ToDo List</h1>\n            </header>\n        </div>\n    )\n}\n\nexport default Header;","import React ,{useState , useEffect} from 'react';\nimport './App.css';\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\nimport Header from \"./components/Header\"\n\nlet user = \"My\";  // replace your name here\n\n// Main function that will be rendered at index.js\nfunction App() {\n  // our useStates \n  const [inputText , setInputText] = useState(\"\");\n  const [todos , setTodos] = useState([]);\n  const [status , setStatus] = useState(\"all\");\n  const [filteredTodos , setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  },[todos , status] );\n\n \n  // filter todos accordind to their status\n  const filterHandler = () => {\n    switch (status){\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n        case 'uncompleted':\n          setFilteredTodos(todos.filter(todo => todo.completed === false));\n          break;\n          default:\n            setFilteredTodos(todos);\n            break;\n    }\n  }\n  // save to local strorage\n\n  const saveLocalTodos = () => {\n       localStorage.setItem('todos' , JSON.stringify(todos));\n  }\n \n\n  // retrieve entries form local storage\n  const getLocalTodos = () => { \n    // if storage is empty then store our new data\n    if(localStorage.getItem('todos') === null){\n      localStorage.setItem('todos'  , JSON.stringify([]));\n    } else {\n      // set our state data from local storage\n       let localData = JSON.parse(localStorage.getItem(\"todos\"));\n       setTodos(localData);\n    }\n  }\n  // return our components\n  return (\n    <div className=\"App\">\n      <Header user={user} />\n      <Form todos={todos}\n       setTodos={setTodos}\n       inputText = {inputText}\n       setStatus = {setStatus}\n        setInputText = {setInputText}/>\n      <TodoList status={status} todos={filteredTodos} setTodos={setTodos} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}